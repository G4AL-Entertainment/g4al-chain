// Code generated by MockGen. DO NOT EDIT.
// Source: x/assetfactory/types/expected_keepers.go

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	types "github.com/G4AL-Entertainment/g4al-chain/x/game/types"
	types0 "github.com/G4AL-Entertainment/g4al-chain/x/permission/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	types2 "github.com/cosmos/cosmos-sdk/x/auth/types"
	nft "github.com/cosmos/cosmos-sdk/x/nft"
	gomock "github.com/golang/mock/gomock"
)

// MockPermissionKeeper is a mock of PermissionKeeper interface.
type MockPermissionKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionKeeperMockRecorder
}

// MockPermissionKeeperMockRecorder is the mock recorder for MockPermissionKeeper.
type MockPermissionKeeperMockRecorder struct {
	mock *MockPermissionKeeper
}

// NewMockPermissionKeeper creates a new mock instance.
func NewMockPermissionKeeper(ctrl *gomock.Controller) *MockPermissionKeeper {
	mock := &MockPermissionKeeper{ctrl: ctrl}
	mock.recorder = &MockPermissionKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionKeeper) EXPECT() *MockPermissionKeeperMockRecorder {
	return m.recorder
}

// GetDeveloper mocks base method.
func (m *MockPermissionKeeper) GetDeveloper(ctx types1.Context, address string) (types0.Developer, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeveloper", ctx, address)
	ret0, _ := ret[0].(types0.Developer)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetDeveloper indicates an expected call of GetDeveloper.
func (mr *MockPermissionKeeperMockRecorder) GetDeveloper(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeveloper", reflect.TypeOf((*MockPermissionKeeper)(nil).GetDeveloper), ctx, address)
}

// ValidateDeveloper mocks base method.
func (m *MockPermissionKeeper) ValidateDeveloper(ctx types1.Context, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateDeveloper", ctx, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateDeveloper indicates an expected call of ValidateDeveloper.
func (mr *MockPermissionKeeperMockRecorder) ValidateDeveloper(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateDeveloper", reflect.TypeOf((*MockPermissionKeeper)(nil).ValidateDeveloper), ctx, address)
}

// MockGameKeeper is a mock of GameKeeper interface.
type MockGameKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockGameKeeperMockRecorder
}

// MockGameKeeperMockRecorder is the mock recorder for MockGameKeeper.
type MockGameKeeperMockRecorder struct {
	mock *MockGameKeeper
}

// NewMockGameKeeper creates a new mock instance.
func NewMockGameKeeper(ctrl *gomock.Controller) *MockGameKeeper {
	mock := &MockGameKeeper{ctrl: ctrl}
	mock.recorder = &MockGameKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameKeeper) EXPECT() *MockGameKeeperMockRecorder {
	return m.recorder
}

// GetProject mocks base method.
func (m *MockGameKeeper) GetProject(ctx types1.Context, symbol string) (types.Project, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", ctx, symbol)
	ret0, _ := ret[0].(types.Project)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockGameKeeperMockRecorder) GetProject(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockGameKeeper)(nil).GetProject), ctx, symbol)
}

// ValidateProjectOwnershipOrDelegateByProject mocks base method.
func (m *MockGameKeeper) ValidateProjectOwnershipOrDelegateByProject(ctx types1.Context, creator, symbol string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateProjectOwnershipOrDelegateByProject", ctx, creator, symbol)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateProjectOwnershipOrDelegateByProject indicates an expected call of ValidateProjectOwnershipOrDelegateByProject.
func (mr *MockGameKeeperMockRecorder) ValidateProjectOwnershipOrDelegateByProject(ctx, creator, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateProjectOwnershipOrDelegateByProject", reflect.TypeOf((*MockGameKeeper)(nil).ValidateProjectOwnershipOrDelegateByProject), ctx, creator, symbol)
}

// MockNftKeeper is a mock of NftKeeper interface.
type MockNftKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockNftKeeperMockRecorder
}

// MockNftKeeperMockRecorder is the mock recorder for MockNftKeeper.
type MockNftKeeperMockRecorder struct {
	mock *MockNftKeeper
}

// NewMockNftKeeper creates a new mock instance.
func NewMockNftKeeper(ctrl *gomock.Controller) *MockNftKeeper {
	mock := &MockNftKeeper{ctrl: ctrl}
	mock.recorder = &MockNftKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNftKeeper) EXPECT() *MockNftKeeperMockRecorder {
	return m.recorder
}

// Burn mocks base method.
func (m *MockNftKeeper) Burn(ctx types1.Context, classId, nftId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Burn", ctx, classId, nftId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Burn indicates an expected call of Burn.
func (mr *MockNftKeeperMockRecorder) Burn(ctx, classId, nftId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Burn", reflect.TypeOf((*MockNftKeeper)(nil).Burn), ctx, classId, nftId)
}

// GetBalance mocks base method.
func (m *MockNftKeeper) GetBalance(ctx types1.Context, classId string, owner types1.AccAddress) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, classId, owner)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockNftKeeperMockRecorder) GetBalance(ctx, classId, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockNftKeeper)(nil).GetBalance), ctx, classId, owner)
}

// GetClass mocks base method.
func (m *MockNftKeeper) GetClass(ctx types1.Context, classId string) (nft.Class, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClass", ctx, classId)
	ret0, _ := ret[0].(nft.Class)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetClass indicates an expected call of GetClass.
func (mr *MockNftKeeperMockRecorder) GetClass(ctx, classId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClass", reflect.TypeOf((*MockNftKeeper)(nil).GetClass), ctx, classId)
}

// GetClasses mocks base method.
func (m *MockNftKeeper) GetClasses(ctx types1.Context) []*nft.Class {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClasses", ctx)
	ret0, _ := ret[0].([]*nft.Class)
	return ret0
}

// GetClasses indicates an expected call of GetClasses.
func (mr *MockNftKeeperMockRecorder) GetClasses(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClasses", reflect.TypeOf((*MockNftKeeper)(nil).GetClasses), ctx)
}

// GetNFT mocks base method.
func (m *MockNftKeeper) GetNFT(ctx types1.Context, classID, nftID string) (nft.NFT, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNFT", ctx, classID, nftID)
	ret0, _ := ret[0].(nft.NFT)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetNFT indicates an expected call of GetNFT.
func (mr *MockNftKeeperMockRecorder) GetNFT(ctx, classID, nftID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNFT", reflect.TypeOf((*MockNftKeeper)(nil).GetNFT), ctx, classID, nftID)
}

// GetNFTsOfClass mocks base method.
func (m *MockNftKeeper) GetNFTsOfClass(ctx types1.Context, classId string) []nft.NFT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNFTsOfClass", ctx, classId)
	ret0, _ := ret[0].([]nft.NFT)
	return ret0
}

// GetNFTsOfClass indicates an expected call of GetNFTsOfClass.
func (mr *MockNftKeeperMockRecorder) GetNFTsOfClass(ctx, classId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNFTsOfClass", reflect.TypeOf((*MockNftKeeper)(nil).GetNFTsOfClass), ctx, classId)
}

// GetNFTsOfClassByOwner mocks base method.
func (m *MockNftKeeper) GetNFTsOfClassByOwner(ctx types1.Context, classId string, owner types1.AccAddress) []nft.NFT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNFTsOfClassByOwner", ctx, classId, owner)
	ret0, _ := ret[0].([]nft.NFT)
	return ret0
}

// GetNFTsOfClassByOwner indicates an expected call of GetNFTsOfClassByOwner.
func (mr *MockNftKeeperMockRecorder) GetNFTsOfClassByOwner(ctx, classId, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNFTsOfClassByOwner", reflect.TypeOf((*MockNftKeeper)(nil).GetNFTsOfClassByOwner), ctx, classId, owner)
}

// GetOwner mocks base method.
func (m *MockNftKeeper) GetOwner(ctx types1.Context, classId, nftId string) types1.AccAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwner", ctx, classId, nftId)
	ret0, _ := ret[0].(types1.AccAddress)
	return ret0
}

// GetOwner indicates an expected call of GetOwner.
func (mr *MockNftKeeperMockRecorder) GetOwner(ctx, classId, nftId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwner", reflect.TypeOf((*MockNftKeeper)(nil).GetOwner), ctx, classId, nftId)
}

// GetTotalSupply mocks base method.
func (m *MockNftKeeper) GetTotalSupply(ctx types1.Context, classId string) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalSupply", ctx, classId)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetTotalSupply indicates an expected call of GetTotalSupply.
func (mr *MockNftKeeperMockRecorder) GetTotalSupply(ctx, classId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalSupply", reflect.TypeOf((*MockNftKeeper)(nil).GetTotalSupply), ctx, classId)
}

// Mint mocks base method.
func (m *MockNftKeeper) Mint(ctx types1.Context, nft nft.NFT, receiver types1.AccAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mint", ctx, nft, receiver)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mint indicates an expected call of Mint.
func (mr *MockNftKeeperMockRecorder) Mint(ctx, nft, receiver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mint", reflect.TypeOf((*MockNftKeeper)(nil).Mint), ctx, nft, receiver)
}

// SaveClass mocks base method.
func (m *MockNftKeeper) SaveClass(ctx types1.Context, class nft.Class) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveClass", ctx, class)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveClass indicates an expected call of SaveClass.
func (mr *MockNftKeeperMockRecorder) SaveClass(ctx, class interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveClass", reflect.TypeOf((*MockNftKeeper)(nil).SaveClass), ctx, class)
}

// Transfer mocks base method.
func (m *MockNftKeeper) Transfer(ctx types1.Context, classId, nftId string, receiver types1.AccAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, classId, nftId, receiver)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockNftKeeperMockRecorder) Transfer(ctx, classId, nftId, receiver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockNftKeeper)(nil).Transfer), ctx, classId, nftId, receiver)
}

// Update mocks base method.
func (m *MockNftKeeper) Update(ctx types1.Context, nft nft.NFT) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, nft)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockNftKeeperMockRecorder) Update(ctx, nft interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNftKeeper)(nil).Update), ctx, nft)
}

// UpdateClass mocks base method.
func (m *MockNftKeeper) UpdateClass(ctx types1.Context, class nft.Class) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClass", ctx, class)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClass indicates an expected call of UpdateClass.
func (mr *MockNftKeeperMockRecorder) UpdateClass(ctx, class interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClass", reflect.TypeOf((*MockNftKeeper)(nil).UpdateClass), ctx, class)
}

// MockAccountKeeper is a mock of AccountKeeper interface.
type MockAccountKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAccountKeeperMockRecorder
}

// MockAccountKeeperMockRecorder is the mock recorder for MockAccountKeeper.
type MockAccountKeeperMockRecorder struct {
	mock *MockAccountKeeper
}

// NewMockAccountKeeper creates a new mock instance.
func NewMockAccountKeeper(ctrl *gomock.Controller) *MockAccountKeeper {
	mock := &MockAccountKeeper{ctrl: ctrl}
	mock.recorder = &MockAccountKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountKeeper) EXPECT() *MockAccountKeeperMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockAccountKeeper) GetAccount(ctx types1.Context, addr types1.AccAddress) types2.AccountI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, addr)
	ret0, _ := ret[0].(types2.AccountI)
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountKeeperMockRecorder) GetAccount(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountKeeper)(nil).GetAccount), ctx, addr)
}

// MockBankKeeper is a mock of BankKeeper interface.
type MockBankKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBankKeeperMockRecorder
}

// MockBankKeeperMockRecorder is the mock recorder for MockBankKeeper.
type MockBankKeeperMockRecorder struct {
	mock *MockBankKeeper
}

// NewMockBankKeeper creates a new mock instance.
func NewMockBankKeeper(ctrl *gomock.Controller) *MockBankKeeper {
	mock := &MockBankKeeper{ctrl: ctrl}
	mock.recorder = &MockBankKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankKeeper) EXPECT() *MockBankKeeperMockRecorder {
	return m.recorder
}

// SpendableCoins mocks base method.
func (m *MockBankKeeper) SpendableCoins(ctx types1.Context, addr types1.AccAddress) types1.Coins {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpendableCoins", ctx, addr)
	ret0, _ := ret[0].(types1.Coins)
	return ret0
}

// SpendableCoins indicates an expected call of SpendableCoins.
func (mr *MockBankKeeperMockRecorder) SpendableCoins(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpendableCoins", reflect.TypeOf((*MockBankKeeper)(nil).SpendableCoins), ctx, addr)
}
